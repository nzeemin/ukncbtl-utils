/*  This file is part of UKNCBTL.
UKNCBTL is free software: you can redistribute it and/or modify it under the terms
of the GNU Lesser General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.
UKNCBTL is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public License along with
UKNCBTL. If not, see <http://www.gnu.org/licenses/>. */

// Loaders.cpp

#include <stddef.h>
#include <stdint.h>
#include "Sav2Cart.h"


//////////////////////////////////////////////////////////////////////

uint16_t const loader[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000104, R2    ; Адрес массива параметров
    0000104,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000116, R3
    0000116,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #001000, R1
    0001000,  // 000050  001000
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    // Запуск загруженной программы на выполнение
    0012706,  // 000072  016706  MOV	#STACK, SP
    0001000,  // 000074  ?????? <= STACK
    0000137,  // 000076  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000100  ?????? <= START
    0000240,  // 000102 NOP
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000104  004000   ; Команда (10) и ответ
    0000021,  // 000106  000021   ; Номер кассеты и номер устройства
    0001000,  // 000110  001000   ; Адрес от начала кассеты ПЗУ
    0001000,  // 000112  001000   ; Адрес в ОЗУ
    0027400,  // 000114  027400   ; Количество слов = 12032. слов = 24064. байт
    0000104,  // 000116
    0177777,  // 000120
};
size_t const loaderSize = sizeof(loader);


//////////////////////////////////////////////////////////////////////

uint16_t const loaderRLE[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000104, R2    ; Адрес массива параметров
    0000104,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000116, R3
    0000116,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #100000, R1
    0100000,  // 000050  100000
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    0000413,  // 000072  000413  BR      000122        ; Переход на RLE decoder
    // Запуск загруженной программы на выполнение
    0012706,  // 000074  016706  MOV	#STACK, SP
    0001000,  // 000076  ?????? <= STACK
    0000137,  // 000100  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000102  ?????? <= START
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000104  004000   ; Команда (10) и ответ
    0000021,  // 000106  000021   ; Номер кассеты и номер устройства
    0001000,  // 000110  001000   ; Адрес от начала кассеты ПЗУ
    0100000,  // 000112  100000   ; Адрес в ОЗУ == RLESTA
    0027400,  // 000114  027400   ; Количество слов = 12032. слов = 24064. байт
    0000104,  // 000116
    0177777,  // 000120
    // RLE decoder
    0012701,  // 000122  012701      MOV  #RLESTA, R1
    0100000,  // 000124  100000 <= RLESTA                ; start address of RLE block
    0012702,  // 000126  012702      MOV  #1000, R2
    0001000,  // 000130  001000                          ; destination start address
    0112100,  // 000132  112100  $1: MOVB (R1+), R0
    0001757,  // 000134  001757      BEQ  000074         ; 0 => decoding finished, let's start the application
    0010003,  // 000136  010003      MOV  R0, R3         ; prepare counter
    0042703,  // 000140  042703      BIC  #177740, R3    ; only lower 5 bits are significant
    0177740,  // 000142  177740
    0105700,  // 000144  105700      TSTB R0             ; 1-byte command?
    0100002,  // 000146  100002      BPL  $2             ; yes => jump
    0000303,  // 000150  000303      SWAB R3             ; move lower byte to high byte
    0152103,  // 000152  152103      BISB (R1)+, R3      ; set lower byte of counter
    0005004,  // 000154  005003  $2: CLR  R4             ; clear filler
    0142700,  // 000156  142700      BICB #237, R0
    0000237,  // 000160  000237
    0001411,  // 000162  001411      BEQ  $3             ; zero pattern? => jump
    0012704,  // 000164  012704      MOV  #377, R4       ;
    0000377,  // 000166  000377
    0122700,  // 000170  122700      CMPB #140, R0       ; #377 pattern?
    0000140,  // 000172  000140
    0001404,  // 000174  001404      BEQ  $3             ; yes => jump
    0122700,  // 000176  122700      CMPB #40, R0       ; given pattern?
    0000040,  // 000200  000040
    0001004,  // 000202  001004      BNE  $4             ; no => jump
    0112104,  // 000204  112104      MOVB (R1+), R4      ; read the given pattern
    0110422,  // 000206  110422  $3: MOVB R4, (R2+)      ; loop: write pattern to destination
    0077302,  // 000210  077302      SOB  R3, $3         ;
    0000747,  // 000212  000747      BR   $1
    0112104,  // 000214  112104  $4: MOVB (R1+), R4      ; loop: copy bytes to destination
    0110422,  // 000216  110422      MOVB R4, (R2+)
    0077303,  // 000220  077303      SOB  R3, $4
    0000743,  // 000222  000743      BR   $1
};
size_t const loaderRLESize = sizeof(loaderRLE);


//////////////////////////////////////////////////////////////////////

uint16_t const loaderLZSS[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000104, R2    ; Адрес массива параметров
    0000104,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000116, R3
    0000116,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #100600, R1
    0100600,  // 000050  100600
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    0000413,  // 000072  000413  BR      000122        ; Переход на LZSS decoder
    // Запуск загруженной программы на выполнение
    0012706,  // 000074  016706  MOV	#STACK, SP
    0001000,  // 000076  ?????? <= STACK
    0000137,  // 000100  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000102  ?????? <= START
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000104  004000   ; Команда (10) и ответ
    0000021,  // 000106  000021   ; Номер кассеты и номер устройства
    0001000,  // 000110  001000   ; Адрес от начала кассеты ПЗУ
    0100600,  // 000112  100600   ; Адрес в ОЗУ == LZSSTA
    0027400,  // 000114  027400   ; Количество слов = 12032. слов = 24064. байт
    0000104,  // 000116
    0177777,  // 000120
    // LZSS decoder, from LZSAV.MAC by Ostapenko Alexey
    0012700,  // 000122  012700          MOV    #LZSSTA, R0
    0100600,  // 000124  100600 <= LZSSTA
    0012702,  // 000126  012702          MOV    #1000, R2
    0001000,  // 000130  001000                                 ; destination start address
    0005003,  // 000132  005003          CLR    R3
    0112001,  // 000134  112001  UNPST:  MOVB	(R0)+,R1		;GET FLAGS
    0012704,  // 000136  012704          MOV	#10,R4			;BITS COUNT
    0000010,  // 000140  000010
    0006001,  // 000142  006001  M402:   ROR	R1
    0103402,  // 000144  103402          BCS	403$			;1?
    0112022,  // 000146  112022          MOVB	(R0)+,(R2)+		;MOV uint8_t
    0000417,  // 000150  000417          BR     405$
    0152003,  // 000152  152003  403$:   BISB   (R0)+,R3		;GET LOW uint8_t
    0000303,  // 000154  000303          SWAB   R3
    0152003,  // 000156  152003          BISB	(R0)+,R3		;GET HIGH uint8_t
    0010305,  // 000160  010305          MOV    R3,R5
    0042705,  // 000162  042705          BIC	#170000,R5		;OFFSET FROM CURRENT POSITION
    0170000,  // 000164  170000
    0040503,  // 000166  040503          BIC	R5,R3
    0073327,  // 000170  073327          ASHC	#-12.,R3
    0177764,  // 000172  177764
    0062703,  // 000174  062703          ADD	#3,R3
    0000003,  // 000176  000003
    0005405,  // 000200  005405          NEG	R5
    0060205,  // 000202  060205          ADD	R2,R5			;ADRESS
    0112522,  // 000204  112522  404$:   MOVB   (R5)+,(R2)+
    0077302,  // 000206  077302          SOB	R3,404$
    0020227,  // 000210  020227  405$:   CMP	R2,(PC)+
    0000000,  // 000212  ?????? <= CTOP
    0001402,  // 000214  001402          BEQ	406$
    0077427,  // 000216  077427          SOB	R4,M402
    0000745,  // 000220  000745          BR     UNPST
    0000724,  // 000222  000724  406$:   BR     LAUNCH
};
size_t const loaderLZSSSize = sizeof(loaderLZSS);


//////////////////////////////////////////////////////////////////////

uint16_t const loaderLZ4[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000104, R2    ; Адрес массива параметров
    0000104,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000116, R3
    0000116,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #100600, R1
    0100600,  // 000050  100600
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    0000413,  // 000072  000413  BR      000122        ; Переход на LZ4 unpacker
    // Запуск загруженной программы на выполнение
    0012706,  // 000074  016706  MOV	#STACK, SP
    0001000,  // 000076  ?????? <= STACK
    0000137,  // 000100  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000102  ?????? <= START
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000104  004000   ; Команда (10) и ответ
    0000021,  // 000106  000021   ; Номер кассеты и номер устройства
    0001000,  // 000110  001000   ; Адрес от начала кассеты ПЗУ
    0100600,  // 000112  100600   ; Адрес в ОЗУ == LZ4TA
    0027400,  // 000114  027400   ; Количество слов = 12032. слов = 24064. байт
    0000104,  // 000116
    0177777,  // 000120
    // LZ4 unpacker for PDP11/EIS by Alexander Troosh
    0012705, 0001000, // 000122  012705 ??????'          MOV     #dst, R5
    0012700, 0000000, // 000126  012700 ??????'          MOV     #src, R0
    0012704, 0177774, // 000132  012704 177774           MOV     #-4,  R4        ; Нет лучше места под константу -4, чем R4
    //
    0005002,          // 000136  005002                  CLR     R2
    //                   000140                  gettoken:
    0152002,          // 000140  152002                  BISB    (R0)+, R2       ; (на входе всегда R2=0), считываем
    0010201,          // 000142  010201                  MOV     R2, R1          ; байт-токен без знакового расширения
    //
    0072104,          // 000144  072104                  ASH     R4, R1          ; Старший полубайт - число литералов
    0001412,          // 000146  001412                  BEQ     noliterals      ; Литералов может и не быть...
    0022701, 0000017, // 000150  022701 000017           CMP     #^X0f, R1       ; Признак большой длины?
    0001005,          // 000154  001005                  BNE     copylits
    0005003,          // 000156  005003                    CLR     R3
    0152003,          // 000160  152003          1$:         BISB  (R0)+, R3     ; Уточняем длину...
    0060301,          // 000162  060301                      ADD   R3, R1
    0105203,          // 000164  105203                      INCB  R3            ; бесконечно долго, пока приходят 0xFF
    0001774,          // 000166  001774                      BEQ   1$
    //
    0112025,          // 000170  112025          copylits: MOVB  (R0)+, (R5)+    ; Копируем литералы
    0077102,          // 000172  077102                    SOB     R1, copylits
    //
    //                   000174                  noliterals:
    0012003,          // 000174  012003                  MOV     (R0)+, R3       ; Получаем два байт смещения
    0001702,          // 000176  001702                  BEQ     LAUNCH          ; Нулевое смещение - конец сжатого блока
    //                                                         ; R1=0, как бы мы сюда не попали
    0042702, 0177760, // 000200  042702 177760           BIC     #^X0fff0, R2    ; Младший полубайт - число копируемых байт
    0022702, 0000017, // 000204  022702 000017           CMP     #^X0f, R2       ; Признак большой длины?
    0001004,          // 000210  001004                  BNE     shortstr
    0152001,          // 000212  152001          2$:       BISB  (R0)+, R1       ; Уточняем длину...
    0060102,          // 000214  060102                    ADD   R1, R2
    0105201,          // 000216  105201                    INCB  R1              ; бесконечно долго, пока приходят 0xFF
    0001774,          // 000220  001774                    BEQ   2$
    //                   000222                  shortstr:
    0160402,          // 000222  160402                  SUB     R4, R2          ; Минимальный размер строки - 4 байта
    0010501,          // 000224  010501                  MOV     R5, R1
    0160301,          // 000226  160301                  SUB     R3, R1
    0112125,          // 000230  112125          copystr:  MOVB  (R1)+, (R5)+    ; Копируем строку из
    0077202,          // 000232  077202                    SOB   R2, copystr     ; уже распакованных данных
    0000741           // 000234  000741                  BR      gettoken
};
size_t const loaderLZ4Size = sizeof(loaderLZ4);


//////////////////////////////////////////////////////////////////////

uint16_t const loaderLZSA1[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000104, R2    ; Адрес массива параметров
    0000104,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000116, R3
    0000116,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #100600, R1
    0100600,  // 000050  100600 <= LZSTART
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400 <= LZWORDS
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    0000413,  // 000072  000413  BR      000122        ; Переход на unpacker
    // Запуск загруженной программы на выполнение
    0012706,  // 000074  016706  MOV	#STACK, SP
    0001000,  // 000076  ?????? <= STACK
    0000137,  // 000100  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000102  ?????? <= START
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000104  004000   ; Команда (10) и ответ
    0000021,  // 000106  000021   ; Номер кассеты и номер устройства
    0001000,  // 000110  001000   ; Адрес от начала кассеты ПЗУ
    0100600,  // 000112  100600   ; Адрес в ОЗУ == LZSTART
    0027400,  // 000114  027400   ; Количество слов == LZWORDS
    0000104,  // 000116
    0177777,  // 000120
    // Начинаем распаковку
    0012701,  // 000122  012701  MOV    #LZSTART, R1
    0100600,  // 000124  100600 <= LZSTART
    0012702,  // 000126  012702  MOV    #1000, R2
    0001000,  // 000130  001000                         ; destination start address
    0004767,  // 000132  004767  CALL   unlzsa1
    0000002,  // 000134  000002
    0000756,  // 000136  000756  BR     LAUNCH
    // LZSA1 unpacker for PDP11 by Ivan Gorodetsky
    // https://gitlab.com/ivagor/lzsa8080/-/blob/master/PDP11/LZSA1/lzsa1.asm
    //                   000140				unlzsa1:
    //                   000140				ReadToken:
    0105067, 0000225, // 000140  105067 000225 				clrb Counter+1
    0112100,          // 000144  112100 					movb (r1)+,r0
    0010005,          // 000146  010005 					mov r0,r5
    0042700, 0177617, // 000150  042700 177617 				bic #177617,r0
    0001417,          // 000154  001417 					beq NoLiterals
    0006200,          // 000156  006200 					asr r0
    0006200,          // 000160  006200 					asr r0
    0006200,          // 000162  006200 					asr r0
    0006200,          // 000164  006200 					asr r0
    0022700, 0000007, // 000166  022700 000007 				cmp #7,r0
    0001002,          // 000172  001002 					bne m1
    0004767, 0000114, // 000174  004767 000114 				jsr pc,ReadLong
    //                   000200				m1:
    0110067, 0000164, // 000200  110067 000164 				movb r0,Counter+0
    0016703, 0000160, // 000204  016703 000160 				mov Counter,r3
    //                   000210				bc1:
    0112122,          // 000210  112122 					movb (r1)+,(r2)+
    0077302,          // 000212  077302 					sob r3,bc1
    //                   000214				NoLiterals:
    0112167, 0000152, // 000214  112167 000152 				movb (r1)+,Offset+0
    0112767, 0000377, 0000145, // 000220  112767 000377 000145 		movb #377,Offset+1
    0110500,          // 000226  110500 					movb r5,r0
    0100002,          // 000230  100002 					bpl ShortOffset
    //                   000232				LongOffset:
    0112167, 0000135, // 000232  112167 000135 				movb (r1)+,Offset+1
    //                   000236				ShortOffset:
    0105067, 0000127, // 000236  105067 000127 				clrb Counter + 1
    0042700, 0177760, // 000242  042700 177760 				bic #177760,r0
    0062700, 0000003, // 000246  062700 000003 				add #3,r0
    0022700, 0000022, // 000252  022700 000022 				cmp #18.,r0
    0001002,          // 000256  001002 					bne m2
    0004767, 0000030, // 000260  004767 000030 				jsr pc,ReadLong
    //                   000264				m2:
    0110067, 0000100, // 000264  110067 000100 				movb r0,Counter+0
    0010104,          // 000270  010104 					mov r1,r4
    0016701, 0000074, // 000272  016701 000074 				mov Offset,r1
    0060201,          // 000276  060201 					add r2,r1
    0016703, 0000064, // 000300  016703 000064 				mov Counter,r3
    //                   000304				bc2:
    0112122,          // 000304  112122 					movb (r1)+,(r2)+
    0077302,          // 000306  077302 					sob r3,bc2
    0010401,          // 000310  010401 					mov r4,r1
    0000712,          // 000312  000712 					br ReadToken
    //                   000314				ReadLong:
    0112104,          // 000314  112104 					movb (r1)+,r4
    0052704, 0177400, // 000316  052704 177400 				bis #177400,r4	;FF00h
    0060400,          // 000322  060400 					add r4,r0
    0103006,          // 000324  103006 					bcc m3
    0110067, 0000037, // 000326  110067 000037 				movb r0,Counter+1
    0112100,          // 000332  112100 					movb (r1)+,r0
    0105767, 0000031, // 000340  105767 000031 				tstb Counter+1
    0001401,          // 000334  001401 					beq m4
    //                   000342				m3:
    0000207,          // 000342  000207 					rts pc
    //                   000344				m4:
    0110067, 0000020, // 000344  110067 000020 				movb r0,Counter+0
    0112167, 0000015, // 000350  112167 000015 				movb (r1)+,Counter+1
    0005767, 0000010, // 000354  005767 000010 				tst Counter
    0001401,          // 000360  001401 					beq m5
    0000207,          // 000362  000207 					rts pc
    //                   000364				m5:
    0012604,          // 000364  012604 					mov (sp)+,r4
    0000207,          // 000366  000207 					rts pc
    0000000,          // 000370  000000 	Counter:	.WORD 0
    0000000,          // 000372  000000 	Offset:		.WORD 0
};
size_t const loaderLZSA1Size = sizeof(loaderLZSA1);


//////////////////////////////////////////////////////////////////////

uint16_t const loaderLZSA2[] =
{
    0000240,  // 000000  000240  NOP
    0012702,  // 000002  012702  MOV     #000116, R2    ; Адрес массива параметров
    0000116,
    0110062,  // 000006  110062  MOVB    R0, 000003(R2)
    0000003,
    0012701,  // 000012  012701  MOV     #000005, R1
    0000005,
    0012703,  // 000016  012703  MOV     #000130, R3
    0000130,
    0000402,  // 000022  000402  BR      000030
    0112337,  // 000024  112337  MOVB    (R3)+, @#176676
    0176676,
    0105737,  // 000030  105737  TSTB    @#176674
    0176674,
    0100375,  // 000034  100375  BPL     000030
    0077106,  // 000036  077106  SOB     R1, 000024
    0105712,  // 000040  105712  TSTB    (R2)
    0001356,  // 000042  001356  BNE     000000
    // Подсчёт контрольной суммы
    0005003,  // 000044  005003  CLR     R3
    0012701,  // 000046  012701  MOV     #100600, R1
    0100600,  // 000050  100600 <= LZSTART
    0012702,  // 000052  012702  MOV     #027400, R2
    0027400,  // 000054  027400 <= LZWORDS
    0062103,  // 000056  062103  ADD     (R1)+, R3
    0005503,  // 000060  005503  ADC     R3
    0077203,  // 000062  077203  SOB     R2, 000056
    0020327,  // 000064  020327  CMP     R3, #CHKSUM
    0000000,  // 000066  ?????? <= CHKSUM
    0001343,  // 000070  001343  BNE     000000
    // Выполняем распаковку
    0012701,  // 000072  012701  MOV	#LZSSTA, R1
    0100600,  // 000074  ?????? <= LZSTART
    0012702,  // 000076  012702  MOV	#1000, R2
    0001000,  // 000100  001000 <= START
    0004767,  // 000102  004767  CALL	unlzsa2
    0000026,  // 000104  000026
    // Распаковали, выполняем запуск
    0012706,  // 000106  016706  MOV	#STACK, SP
    0001000,  // 000110  ?????? <= STACK
    0000137,  // 000112  000137  JMP    START   ; Переход на загруженный код
    0001000,  // 000114  001000 <= START
    // Массив параметров для получения данных с кассеты ПЗУ через канал 2
    0004000,  // 000116  004000   ; Команда (10) и ответ
    0000021,  // 000120  000021   ; Номер кассеты и номер устройства
    0001000,  // 000122  001000   ; Адрес от начала кассеты ПЗУ
    0100600,  // 000124  100600   ; Адрес в ОЗУ <= LZSTART
    0027400,  // 000126  027400   ; Количество слов <= LZWORDS
    0000116,  // 000130
    0177777,  // 000132
    // Начинаем распаковку
    // LZSA2 PDP-11 decompressor by Ivan Gorodetsky
    // https://gitlab.com/ivagor/lzsa8080/-/blob/master/PDP11/LZSA2/lzsa2.asm
    //                   000134				unlzsa2:
    0005004,          // 000134  005004 					clr r4
    0005067, 0000434, // 000136  005067 000434 				clr Counter
    0000461,          // 000142  000461 					br ReadToken
    //                   000144				C00x:
    0004767, 0000364, // 000144  004767 000364 				jsr pc, ReadNibble
    0110067, 0000424, // 000150  110067 000424 				movb r0,Offset
    0005000,          // 000154  005000 					clr r0
    0156700, 0000414, // 000156  156700 000414 				bisb Counter,r0
    0020027, 0000040, // 000162  020027 000040 				cmp r0,#40
    0106167, 0000406, // 000166  106167 000406 				rolb Offset
    0000414,          // 000172  000414 					br SaveOffset
    //                   000174				C0xx:
    0112767, 0000377, 0000377, // 000174  112767 000377 000377 		movb #377,Offset+1
    0020027, 0000100, // 000202  020027 000100 				cmp r0,#100
    0103756,          // 000206  103756 					bcs C00x
    //                   000210				C01x:
    0020027, 0000140, // 000210  020027 000140 				cmp r0,#140
    0106167, 0000361, // 000214  106167 000361 				rolb Offset+1
    //                   000220				OffReadLow:
    0112167, 0000354, // 000220  112167 000354 				movb (r1)+,Offset
    //                   000224				SaveOffset:
    0016767, 0000350, 0000350, // 000224  016767 000350 000350 		mov Offset,SavedOffset
    //                   000232				MatchLen:
    0042700, 0177770, // 000232  042700 177770 				bic #177770,r0
    0062700, 0000002, // 000236  062700 000002 				add #2,r0
    0020027, 0000011, // 000242  020027 000011 				cmp r0,#9.
    0001002,          // 000246  001002 					bne CopyMatch
    0004767, 0000174, // 000250  004767 000174 				jsr pc,ExtendedCode
    //                   000254				CopyMatch:
    0110067, 0000316, // 000254  110067 000316 				movb r0,Counter
    0010105,          // 000260  010105 					mov r1,r5
    0016701, 0000312, // 000262  016701 000312 				mov Offset,r1
    0060201,          // 000266  060201 					add r2,r1
    0016703, 0000302, // 000270  016703 000302 				mov Counter,r3
    //                   000274				bc2:
    0112122,          // 000274  112122 					movb (r1)+,(r2)+
    0077302,          // 000276  077302 					sob r3,bc2
    0005067, 0000272, // 000300  005067 000272 				clr Counter
    0010501,          // 000304  010501 					mov r5,r1
    //                   000306				ReadToken:
    0112100,          // 000306  112100 					movb (r1)+,r0
    0010005,          // 000310  010005 					mov r0,r5
    0042700, 0177747, // 000312  042700 177747 				bic #177747,r0
    0001420,          // 000316  001420 					beq NoLiterals
    0006200,          // 000320  006200 					asr r0
    0006200,          // 000322  006200 					asr r0
    0006200,          // 000324  006200 					asr r0
    0022700, 0000003, // 000326  022700 000003 				cmp #3,r0
    0001002,          // 000332  001002 					bne m1
    0004767, 0000110, // 000334  004767 000110 				jsr pc,ExtendedCode
    //                   000340				m1:
    0110067, 0000232, // 000340  110067 000232 				movb r0,Counter
    0016703, 0000226, // 000344  016703 000226 				mov Counter,r3
    //                   000350				bc1:
    0112122,          // 000350  112122 					movb (r1)+,(r2)+
    0077302,          // 000352  077302 					sob r3,bc1
    0005067, 0000216, // 000354  005067 000216 				clr Counter
    //                   000360				NoLiterals:
    0010500,          // 000360  010500 					mov r5,r0
    0100304,          // 000362  100304 					bpl C0xx
    //                   000364				C1xx:
    0020027, 0177700, // 000364  020027 177700 				cmp r0,#177700
    0103020,          // 000370  103020 					bcc C11x
    //                   000372				C10x:
    0004767, 0000136, // 000372  004767 000136 				jsr pc,ReadNibble
    0110067, 0000177, // 000376  110067 000177 				movb r0,Offset+1
    0116700, 0000170, // 000402  116700 000170 				movb Counter,r0
    0020027, 0177640, // 000406  020027 177640 				cmp r0,#177640
    0105367, 0000163, // 000412  105367 000163 				decb Offset+1
    0106167, 0000157, // 000416  106167 000157 				rolb Offset+1
    0000676,          // 000422  000676 					br OffsetReadLow
    //                   000424				C110:
    0112167, 0000151, // 000424  112167 000151 				movb (r1)+,Offset+1
    0000673,          // 000430  000673 					br OffsetReadLow
    //                   000432				C11x:
    0020027, 0177740, // 000432  020027 177740 				cmp r0,#177740
    0103772,          // 000436  103772 					bcs C110
    //                   000440				C111:
    0016767, 0000136, 0000132, // 000440  016767 000136 000132 			mov SavedOffset,Offset
    0000671,          // 000446  000671 					br MatchLen
    //                   000450				ExtendedCode:
    0004767, 0000060, // 000450  004767 000060 				jsr pc,ReadNibble
    0005200,          // 000454  005200 					inc r0
    0001405,          // 000456  001405 					beq ExtraByte
    0162700, 0177761, // 000460  162700 177761 				sub #177761,r0
    0066700, 0000106, // 000464  066700 000106 				add Counter,r0
    0000207,          // 000470  000207 					rts pc
    //                   000472				ExtraByte:
    0012700, 0000017, // 000472  012700 000017 				mov #15.,r0
    0066700, 0000074, // 000476  066700 000074 				add Counter,r0
    0052700, 0177400, // 000502  052700 177400 				bis #177400,r0
    0005003,          // 000506  005003 					clr r3
    0152103,          // 000510  152103 					bisb (r1)+,r3
    0060300,          // 000512  060300 					add r3,r0
    0103004,          // 000514  103004 					bcc m2
    0001404,          // 000516  001404 					beq Exit
    0112100,          // 000520  112100 					movb (r1)+,r0
    0112167, 0000051, // 000522  112167 000051 				movb (r1)+,Counter+1
    //                   000526				m2:
    0000207,          // 000526  000207 					rts pc
    //                   000530				Exit:
    0012605,          // 000530  012605 					mov (sp)+,r5
    0000207,          // 000532  000207 					rts pc
    //                   000534				ReadNibble:
    0110067, 0000036, // 000534  110067 000036 				movb r0,Counter
    0110400,          // 000540  110400 					movb r4,r0
    0100002,          // 000542  100002 					bpl NewNibble
    0005004,          // 000544  005004 					clr r4
    0000207,          // 000546  000207 					rts pc
    //                   000550				NewNibble:
    0112104,          // 000550  112104 					movb (r1)+,r4
    0110400,          // 000552  110400 					movb r4,r0
    0052704, 0177760, // 000554  052704 177760 				bis #177760,r4
    0006200,          // 000560  006200 					asr r0
    0006200,          // 000562  006200 					asr r0
    0006200,          // 000564  006200 					asr r0
    0006200,          // 000566  006200 					asr r0
    0052700, 0177760, // 000570  052700 177760 				bis #177760,r0
    0000207,          // 000574  000207 					rts pc
    0000000,          // 000576  000000 	Counter:	    .WORD 0
    0000000,          // 000600  000000 	Offset:		    .WORD 0
    0000000,          // 000602  000000 	SavedOffset:	.WORD 0
};
size_t const loaderLZSA2Size = sizeof(loaderLZSA2);


//////////////////////////////////////////////////////////////////////
